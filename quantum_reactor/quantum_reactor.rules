Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/QuantumReactor"
	IconNameKey = "Parts/QuantumReactorIcon"
	ID = nc.quantum_reactor // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	OtherIDs = []
	EditorGroup = "QuantoniumTechnologies"
	DescriptionKey = "Parts/QuantumReactorDesc"
	Resources
	[
		[steel, 85]
		[hyperium, 10]
		[enriched_uranium, 1]
	]
	Size = [1, 1]
	SelectionTypeID = "reactors"
	MaxHealth = 5500
	TypeCategories = [reactor, provides_power]
	ReceivableBuffs : ^/0/ReceivableBuffs []
	CrewSpeedFactor = 1.5
	CrewCongestedSpeedFactor = 1
	IgnoreRotationForMirroredSelection = true
	IsRotateable = false
	SelectionPriority = 0
	CreateUnderlyingWhenDestroyed = false
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 32]
	}
	Components : ^/0/Components
	{
		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 16000
			StartingResources = &MaxResources
			SuppliesResources = true
			MinResourcesPickUp = 1000
			MaxResourcesPickUp = 1000
			ExpectedResourceGenerationRate = { BaseValue = (&../../BatteryProducer/ToQuantity) / (&../../BatteryProducer/Interval/BaseValue); BuffType=ElectronDebuff; BuffMode=Multiply; }
			ToggleOnResources = 1001
			ToggleOffResources = 1000
		}
		BatteryProducer
		{
			Type = ResourceConverter
			ToStorage = BatteryStorage
			ToQuantity = 1000
			Interval = { BaseValue=0.008; BuffType=ElectronDebuff; BuffMode=Divide; }
		}

		Graphics
		{
			Type = Graphics
			Location = [.5, .5]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"floor_on1.png"
							"floor_on2.png"
							"floor_on3.png"
							"floor_on4.png"
							"floor_on5.png"
							"floor_on6.png"
							"floor_on7.png"
							"floor_on8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.095
					}
					{
						AnimationFiles
						[
							"floor_on1_33.png"
							"floor_on2_33.png"
							"floor_on3_33.png"
							"floor_on4_33.png"
							"floor_on5_33.png"
							"floor_on6_33.png"
							"floor_on7_33.png"
							"floor_on8_33.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.095
					}
					{
						AnimationFiles
						[
							"floor_on1_66.png"
							"floor_on2_66.png"
							"floor_on3_66.png"
							"floor_on4_66.png"
							"floor_on5_66.png"
							"floor_on6_66.png"
							"floor_on7_66.png"
							"floor_on8_66.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.095
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "reactor.png"
						Size = [1, 1]
					}
					{
						File = "reactor_33.png"
						Size = [1, 1]
					}
					{
						File = "reactor_66.png"
						Size = [1, 1]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"lights1.png"
							"lights2.png"
							"lights3.png"
							"lights4.png"
							"lights5.png"
							"lights6.png"
							"lights7.png"
							"lights8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.075
					}
					{
						AnimationFiles
						[
							"lights1.png"
							"lights2.png"
							"lights3.png"
							"lights4.png"
							"lights5.png"
							"lights6.png"
							"lights7.png"
							"lights8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.075/1.75
					}
					{
						AnimationFiles
						[
							"lights1.png"
							"lights2.png"
							"lights3.png"
							"lights4.png"
							"lights5.png"
							"lights6.png"
							"lights7.png"
							"lights8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.075/2.5
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 1]
					}
					{
						File = "walls_33.png"
						Size = [1, 1]
					}
					{
						File = "walls_66.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 1]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [1, 1]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "roof_glows.png"
						Size = [1, 1]
					}
					{
						File = "roof_glows_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_glows_66.png"
						Size = [1, 1]
					}
				]
			}

			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [3, 3]
						Z = 2.5 // Controls the "height" of the light for the purposes of normal mapping.
						VertexColor = [180*1.0,255*1.0, 77*1.0]
					}
				]
			}
		}

		ReactorHum
		{
			Type = ContinuousEffects
			Location = [.5, .5]
			MaxMediaEffectsZoom = 4
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "operating.wav"
					Volume = .5
					Speed = .5
					MaxConcurrent = 1
					DynamicVolume : ^/0/DynamicVolume
					{
						ExteriorVolume = .5
					}
				}
			]
		}

		/*
		ElectronDebuffToggle
		{
			Type = BuffToggle
			BuffType = ElectronDebuff
		}

		ElectronNebulaEffects
		{
			Type = ContinuousEffects
			OperationalToggle = ElectronDebuffToggle
			Location = [1, 1]
			MediaEffectsIntensityFactor = { BaseValue=1; BuffType=ElectronNebula; BuffMode=Multiply; }
			MediaEffects
			[
				&<./Data/nebulas/electron/particles/electron_reactor_light.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/nebulas/electron/sounds/electron_cloud_reactor_weaken.wav"
					Volume = 1
					MaxConcurrentVolume = &Volume
					MaxConcurrent = 1
				}
			]
		}
		
		ElectronNebulaShipEffects
		{
			Type = ContinuousEffects
			OperationalToggle = ElectronDebuffToggle
			Location = [1, 1]
			ParentToShip = true
			MediaEffectsIntensityFactor = { BaseValue=1; BuffType=ElectronNebula; BuffMode=Multiply; }
			MediaEffects
			[
				&<./Data/nebulas/electron/particles/electron_reactor_sizzle.rules>
			]
		}
		*/


		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, 1]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			Round = Down
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Offset = [0.2525, -0.5]
					Size = [.25, .25]
				}
				{
					File = "batteries2.png"
					Offset = [0.2525, -0.5]
					Size = [.25, .25]
				}
				{
					File = "batteries3.png"
					Size = [.5, .5]
				}
				{
					File = "batteries4.png"
					Size = [.5, .5]
				}
				{
					File = "batteries5.png"
					Size = [.5, .5]
				}
				{
					File = "batteries6.png"
					Size = [.5, .5]
				}
				{
					File = "batteries7.png"
					Size = [.5, .5]
				}
				{
					File = "batteries8.png"
					Size = [.5, .5]
				}
			]
		}

		DestroyedEffects
		{
			Type = DeathEffects
			Location = [.5, .5]

			MediaEffects
			[
				//&<particles/reactor_explode_small.rules>
				//&<particles/reactor_explode_flash_small.rules>
				//&<particles/reactor_shockwave_small.rules>
				&<./Data/common_effects/particles/explosions/med_part_explode_debris.rules>
				&<./Data/common_effects/particles/explosions/big_part_explode_smoke.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "destroyed.wav"
					Volume = 1
					SpeedVariation = .25
				}

				: /BASE_SHAKE
				{
					ShakeAmount = .25
					Duration = 2
				}
			]

			/*
			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 90000
					Radius = 6
					Delay = .05
					ExpandDuration = .1
					ExpandStartRadius = 2
					ExpandLoss = 100%
					FireChancePerNDamage = 50%
					ImpulsePerNDamage = 10
					NDamage = 1000
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 20000
					Radius = 4
					Delay = .05
					ExpandDuration = .05
					ExpandStartRadius = 2
					ExpandLoss = 100%
					ImpulsePerNDamage = 5
					NDamage = 1000
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
					}
				}
			]
			*/
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, .5]
			Indicators
			[
				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [.5, .5]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 1]
		}
	}

	Stats
	{
		PowerGeneration = (&~/Part/Components/BatteryProducer/ToQuantity) / (&~/Part/Components/BatteryProducer/Interval/BaseValue) / 1000
		BatterySize = (&~/Part/Components/BatteryStorage/MaxResourcesPickUp) / 1000
		BatteryFillTime = 0
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
	}
}